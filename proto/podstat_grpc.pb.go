// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: podstat.proto

package podstat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PodStatIntfClient is the client API for PodStatIntf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PodStatIntfClient interface {
	GetPodStatusByName(ctx context.Context, in *PodStatRequest, opts ...grpc.CallOption) (*PodStatReply, error)
	GetAllPodStatus(ctx context.Context, in *PodStatRequest, opts ...grpc.CallOption) (PodStatIntf_GetAllPodStatusClient, error)
	ListenPodStatus(ctx context.Context, in *PodStatRequest, opts ...grpc.CallOption) (PodStatIntf_ListenPodStatusClient, error)
}

type podStatIntfClient struct {
	cc grpc.ClientConnInterface
}

func NewPodStatIntfClient(cc grpc.ClientConnInterface) PodStatIntfClient {
	return &podStatIntfClient{cc}
}

func (c *podStatIntfClient) GetPodStatusByName(ctx context.Context, in *PodStatRequest, opts ...grpc.CallOption) (*PodStatReply, error) {
	out := new(PodStatReply)
	err := c.cc.Invoke(ctx, "/podstat.PodStatIntf/GetPodStatusByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podStatIntfClient) GetAllPodStatus(ctx context.Context, in *PodStatRequest, opts ...grpc.CallOption) (PodStatIntf_GetAllPodStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &PodStatIntf_ServiceDesc.Streams[0], "/podstat.PodStatIntf/GetAllPodStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &podStatIntfGetAllPodStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PodStatIntf_GetAllPodStatusClient interface {
	Recv() (*PodStatReply, error)
	grpc.ClientStream
}

type podStatIntfGetAllPodStatusClient struct {
	grpc.ClientStream
}

func (x *podStatIntfGetAllPodStatusClient) Recv() (*PodStatReply, error) {
	m := new(PodStatReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *podStatIntfClient) ListenPodStatus(ctx context.Context, in *PodStatRequest, opts ...grpc.CallOption) (PodStatIntf_ListenPodStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &PodStatIntf_ServiceDesc.Streams[1], "/podstat.PodStatIntf/ListenPodStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &podStatIntfListenPodStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PodStatIntf_ListenPodStatusClient interface {
	Recv() (*PodStatReply, error)
	grpc.ClientStream
}

type podStatIntfListenPodStatusClient struct {
	grpc.ClientStream
}

func (x *podStatIntfListenPodStatusClient) Recv() (*PodStatReply, error) {
	m := new(PodStatReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PodStatIntfServer is the server API for PodStatIntf service.
// All implementations must embed UnimplementedPodStatIntfServer
// for forward compatibility
type PodStatIntfServer interface {
	GetPodStatusByName(context.Context, *PodStatRequest) (*PodStatReply, error)
	GetAllPodStatus(*PodStatRequest, PodStatIntf_GetAllPodStatusServer) error
	ListenPodStatus(*PodStatRequest, PodStatIntf_ListenPodStatusServer) error
	mustEmbedUnimplementedPodStatIntfServer()
}

// UnimplementedPodStatIntfServer must be embedded to have forward compatible implementations.
type UnimplementedPodStatIntfServer struct {
}

func (UnimplementedPodStatIntfServer) GetPodStatusByName(context.Context, *PodStatRequest) (*PodStatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodStatusByName not implemented")
}
func (UnimplementedPodStatIntfServer) GetAllPodStatus(*PodStatRequest, PodStatIntf_GetAllPodStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllPodStatus not implemented")
}
func (UnimplementedPodStatIntfServer) ListenPodStatus(*PodStatRequest, PodStatIntf_ListenPodStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenPodStatus not implemented")
}
func (UnimplementedPodStatIntfServer) mustEmbedUnimplementedPodStatIntfServer() {}

// UnsafePodStatIntfServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PodStatIntfServer will
// result in compilation errors.
type UnsafePodStatIntfServer interface {
	mustEmbedUnimplementedPodStatIntfServer()
}

func RegisterPodStatIntfServer(s grpc.ServiceRegistrar, srv PodStatIntfServer) {
	s.RegisterService(&PodStatIntf_ServiceDesc, srv)
}

func _PodStatIntf_GetPodStatusByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodStatIntfServer).GetPodStatusByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podstat.PodStatIntf/GetPodStatusByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodStatIntfServer).GetPodStatusByName(ctx, req.(*PodStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodStatIntf_GetAllPodStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PodStatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PodStatIntfServer).GetAllPodStatus(m, &podStatIntfGetAllPodStatusServer{stream})
}

type PodStatIntf_GetAllPodStatusServer interface {
	Send(*PodStatReply) error
	grpc.ServerStream
}

type podStatIntfGetAllPodStatusServer struct {
	grpc.ServerStream
}

func (x *podStatIntfGetAllPodStatusServer) Send(m *PodStatReply) error {
	return x.ServerStream.SendMsg(m)
}

func _PodStatIntf_ListenPodStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PodStatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PodStatIntfServer).ListenPodStatus(m, &podStatIntfListenPodStatusServer{stream})
}

type PodStatIntf_ListenPodStatusServer interface {
	Send(*PodStatReply) error
	grpc.ServerStream
}

type podStatIntfListenPodStatusServer struct {
	grpc.ServerStream
}

func (x *podStatIntfListenPodStatusServer) Send(m *PodStatReply) error {
	return x.ServerStream.SendMsg(m)
}

// PodStatIntf_ServiceDesc is the grpc.ServiceDesc for PodStatIntf service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PodStatIntf_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "podstat.PodStatIntf",
	HandlerType: (*PodStatIntfServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPodStatusByName",
			Handler:    _PodStatIntf_GetPodStatusByName_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllPodStatus",
			Handler:       _PodStatIntf_GetAllPodStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenPodStatus",
			Handler:       _PodStatIntf_ListenPodStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "podstat.proto",
}
